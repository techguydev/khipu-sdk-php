<?php
/**
 * ReceiverPostReceiver
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Pagos Instantáneos
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReceiverPostReceiver Class Doc Comment
 *
 * @category Class
 * @description Crear una nueva cuenta de cobro asociada a un integrador. Necesita datos de la cuenta de usuario asociada, datos de facturación y datos de contacto.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReceiverPostReceiver implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'receiver-post-receiver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'admin_first_name' => 'string',
        'admin_last_name' => 'string',
        'admin_email' => 'string',
        'country_code' => 'string',
        'business_identifier' => 'string',
        'business_category' => 'string',
        'business_name' => 'string',
        'business_phone' => 'string',
        'business_address_line_1' => 'string',
        'business_address_line_2' => 'string',
        'business_address_line_3' => 'string',
        'contact_full_name' => 'string',
        'contact_job_title' => 'string',
        'contact_email' => 'string',
        'contact_phone' => 'string',
        'bank_account_bank_id' => 'string',
        'bank_account_type' => 'string',
        'bank_account_identifier' => 'string',
        'bank_account_name' => 'string',
        'bank_account_number' => 'string',
        'notify_url' => 'string',
        'rendition_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'admin_first_name' => null,
        'admin_last_name' => null,
        'admin_email' => 'email',
        'country_code' => null,
        'business_identifier' => null,
        'business_category' => null,
        'business_name' => null,
        'business_phone' => null,
        'business_address_line_1' => null,
        'business_address_line_2' => null,
        'business_address_line_3' => null,
        'contact_full_name' => null,
        'contact_job_title' => null,
        'contact_email' => 'email',
        'contact_phone' => null,
        'bank_account_bank_id' => null,
        'bank_account_type' => null,
        'bank_account_identifier' => null,
        'bank_account_name' => null,
        'bank_account_number' => null,
        'notify_url' => null,
        'rendition_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'admin_first_name' => false,
        'admin_last_name' => false,
        'admin_email' => false,
        'country_code' => false,
        'business_identifier' => false,
        'business_category' => false,
        'business_name' => false,
        'business_phone' => false,
        'business_address_line_1' => false,
        'business_address_line_2' => false,
        'business_address_line_3' => false,
        'contact_full_name' => false,
        'contact_job_title' => false,
        'contact_email' => false,
        'contact_phone' => false,
        'bank_account_bank_id' => false,
        'bank_account_type' => false,
        'bank_account_identifier' => false,
        'bank_account_name' => false,
        'bank_account_number' => false,
        'notify_url' => false,
        'rendition_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_first_name' => 'admin_first_name',
        'admin_last_name' => 'admin_last_name',
        'admin_email' => 'admin_email',
        'country_code' => 'country_code',
        'business_identifier' => 'business_identifier',
        'business_category' => 'business_category',
        'business_name' => 'business_name',
        'business_phone' => 'business_phone',
        'business_address_line_1' => 'business_address_line_1',
        'business_address_line_2' => 'business_address_line_2',
        'business_address_line_3' => 'business_address_line_3',
        'contact_full_name' => 'contact_full_name',
        'contact_job_title' => 'contact_job_title',
        'contact_email' => 'contact_email',
        'contact_phone' => 'contact_phone',
        'bank_account_bank_id' => 'bank_account_bank_id',
        'bank_account_type' => 'bank_account_type',
        'bank_account_identifier' => 'bank_account_identifier',
        'bank_account_name' => 'bank_account_name',
        'bank_account_number' => 'bank_account_number',
        'notify_url' => 'notify_url',
        'rendition_url' => 'rendition_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_first_name' => 'setAdminFirstName',
        'admin_last_name' => 'setAdminLastName',
        'admin_email' => 'setAdminEmail',
        'country_code' => 'setCountryCode',
        'business_identifier' => 'setBusinessIdentifier',
        'business_category' => 'setBusinessCategory',
        'business_name' => 'setBusinessName',
        'business_phone' => 'setBusinessPhone',
        'business_address_line_1' => 'setBusinessAddressLine1',
        'business_address_line_2' => 'setBusinessAddressLine2',
        'business_address_line_3' => 'setBusinessAddressLine3',
        'contact_full_name' => 'setContactFullName',
        'contact_job_title' => 'setContactJobTitle',
        'contact_email' => 'setContactEmail',
        'contact_phone' => 'setContactPhone',
        'bank_account_bank_id' => 'setBankAccountBankId',
        'bank_account_type' => 'setBankAccountType',
        'bank_account_identifier' => 'setBankAccountIdentifier',
        'bank_account_name' => 'setBankAccountName',
        'bank_account_number' => 'setBankAccountNumber',
        'notify_url' => 'setNotifyUrl',
        'rendition_url' => 'setRenditionUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_first_name' => 'getAdminFirstName',
        'admin_last_name' => 'getAdminLastName',
        'admin_email' => 'getAdminEmail',
        'country_code' => 'getCountryCode',
        'business_identifier' => 'getBusinessIdentifier',
        'business_category' => 'getBusinessCategory',
        'business_name' => 'getBusinessName',
        'business_phone' => 'getBusinessPhone',
        'business_address_line_1' => 'getBusinessAddressLine1',
        'business_address_line_2' => 'getBusinessAddressLine2',
        'business_address_line_3' => 'getBusinessAddressLine3',
        'contact_full_name' => 'getContactFullName',
        'contact_job_title' => 'getContactJobTitle',
        'contact_email' => 'getContactEmail',
        'contact_phone' => 'getContactPhone',
        'bank_account_bank_id' => 'getBankAccountBankId',
        'bank_account_type' => 'getBankAccountType',
        'bank_account_identifier' => 'getBankAccountIdentifier',
        'bank_account_name' => 'getBankAccountName',
        'bank_account_number' => 'getBankAccountNumber',
        'notify_url' => 'getNotifyUrl',
        'rendition_url' => 'getRenditionUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('admin_first_name', $data ?? [], null);
        $this->setIfExists('admin_last_name', $data ?? [], null);
        $this->setIfExists('admin_email', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('business_identifier', $data ?? [], null);
        $this->setIfExists('business_category', $data ?? [], null);
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('business_phone', $data ?? [], null);
        $this->setIfExists('business_address_line_1', $data ?? [], null);
        $this->setIfExists('business_address_line_2', $data ?? [], null);
        $this->setIfExists('business_address_line_3', $data ?? [], null);
        $this->setIfExists('contact_full_name', $data ?? [], null);
        $this->setIfExists('contact_job_title', $data ?? [], null);
        $this->setIfExists('contact_email', $data ?? [], null);
        $this->setIfExists('contact_phone', $data ?? [], null);
        $this->setIfExists('bank_account_bank_id', $data ?? [], null);
        $this->setIfExists('bank_account_type', $data ?? [], null);
        $this->setIfExists('bank_account_identifier', $data ?? [], null);
        $this->setIfExists('bank_account_name', $data ?? [], null);
        $this->setIfExists('bank_account_number', $data ?? [], null);
        $this->setIfExists('notify_url', $data ?? [], null);
        $this->setIfExists('rendition_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['admin_first_name'] === null) {
            $invalidProperties[] = "'admin_first_name' can't be null";
        }
        if ((mb_strlen($this->container['admin_first_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'admin_first_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['admin_last_name'] === null) {
            $invalidProperties[] = "'admin_last_name' can't be null";
        }
        if ((mb_strlen($this->container['admin_last_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'admin_last_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['admin_email'] === null) {
            $invalidProperties[] = "'admin_email' can't be null";
        }
        if ((mb_strlen($this->container['admin_email']) > 255)) {
            $invalidProperties[] = "invalid value for 'admin_email', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['business_identifier'] === null) {
            $invalidProperties[] = "'business_identifier' can't be null";
        }
        if ((mb_strlen($this->container['business_identifier']) > 255)) {
            $invalidProperties[] = "invalid value for 'business_identifier', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['business_identifier']) < 8)) {
            $invalidProperties[] = "invalid value for 'business_identifier', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['business_category'] === null) {
            $invalidProperties[] = "'business_category' can't be null";
        }
        if ((mb_strlen($this->container['business_category']) > 255)) {
            $invalidProperties[] = "invalid value for 'business_category', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['business_name'] === null) {
            $invalidProperties[] = "'business_name' can't be null";
        }
        if ((mb_strlen($this->container['business_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'business_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['business_phone'] === null) {
            $invalidProperties[] = "'business_phone' can't be null";
        }
        if ((mb_strlen($this->container['business_phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'business_phone', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['business_phone']) < 5)) {
            $invalidProperties[] = "invalid value for 'business_phone', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['business_address_line_1'] === null) {
            $invalidProperties[] = "'business_address_line_1' can't be null";
        }
        if ((mb_strlen($this->container['business_address_line_1']) > 300)) {
            $invalidProperties[] = "invalid value for 'business_address_line_1', the character length must be smaller than or equal to 300.";
        }

        if ((mb_strlen($this->container['business_address_line_1']) < 4)) {
            $invalidProperties[] = "invalid value for 'business_address_line_1', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['business_address_line_2'] === null) {
            $invalidProperties[] = "'business_address_line_2' can't be null";
        }
        if ((mb_strlen($this->container['business_address_line_2']) > 300)) {
            $invalidProperties[] = "invalid value for 'business_address_line_2', the character length must be smaller than or equal to 300.";
        }

        if ((mb_strlen($this->container['business_address_line_2']) < 4)) {
            $invalidProperties[] = "invalid value for 'business_address_line_2', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['business_address_line_3'] === null) {
            $invalidProperties[] = "'business_address_line_3' can't be null";
        }
        if ((mb_strlen($this->container['business_address_line_3']) > 300)) {
            $invalidProperties[] = "invalid value for 'business_address_line_3', the character length must be smaller than or equal to 300.";
        }

        if ((mb_strlen($this->container['business_address_line_3']) < 4)) {
            $invalidProperties[] = "invalid value for 'business_address_line_3', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['contact_full_name'] === null) {
            $invalidProperties[] = "'contact_full_name' can't be null";
        }
        if ((mb_strlen($this->container['contact_full_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_full_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['contact_job_title'] === null) {
            $invalidProperties[] = "'contact_job_title' can't be null";
        }
        if ((mb_strlen($this->container['contact_job_title']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_job_title', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['contact_email'] === null) {
            $invalidProperties[] = "'contact_email' can't be null";
        }
        if ((mb_strlen($this->container['contact_email']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['contact_phone'] === null) {
            $invalidProperties[] = "'contact_phone' can't be null";
        }
        if ((mb_strlen($this->container['contact_phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'contact_phone', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['contact_phone']) < 5)) {
            $invalidProperties[] = "invalid value for 'contact_phone', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['bank_account_bank_id']) && (mb_strlen($this->container['bank_account_bank_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'bank_account_bank_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['bank_account_type']) && (mb_strlen($this->container['bank_account_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'bank_account_type', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bank_account_identifier']) && (mb_strlen($this->container['bank_account_identifier']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_account_identifier', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_account_name']) && (mb_strlen($this->container['bank_account_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'bank_account_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notify_url']) && (mb_strlen($this->container['notify_url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'notify_url', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['rendition_url']) && (mb_strlen($this->container['rendition_url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'rendition_url', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_first_name
     *
     * @return string
     */
    public function getAdminFirstName()
    {
        return $this->container['admin_first_name'];
    }

    /**
     * Sets admin_first_name
     *
     * @param string $admin_first_name Nombre de pila del administrador de la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setAdminFirstName($admin_first_name)
    {
        if (is_null($admin_first_name)) {
            throw new \InvalidArgumentException('non-nullable admin_first_name cannot be null');
        }
        if ((mb_strlen($admin_first_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $admin_first_name when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['admin_first_name'] = $admin_first_name;

        return $this;
    }

    /**
     * Gets admin_last_name
     *
     * @return string
     */
    public function getAdminLastName()
    {
        return $this->container['admin_last_name'];
    }

    /**
     * Sets admin_last_name
     *
     * @param string $admin_last_name Apellido del administrador de la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setAdminLastName($admin_last_name)
    {
        if (is_null($admin_last_name)) {
            throw new \InvalidArgumentException('non-nullable admin_last_name cannot be null');
        }
        if ((mb_strlen($admin_last_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $admin_last_name when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['admin_last_name'] = $admin_last_name;

        return $this;
    }

    /**
     * Gets admin_email
     *
     * @return string
     */
    public function getAdminEmail()
    {
        return $this->container['admin_email'];
    }

    /**
     * Sets admin_email
     *
     * @param string $admin_email Correo electrónico del administrador de la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setAdminEmail($admin_email)
    {
        if (is_null($admin_email)) {
            throw new \InvalidArgumentException('non-nullable admin_email cannot be null');
        }
        if ((mb_strlen($admin_email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $admin_email when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['admin_email'] = $admin_email;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Código alfanumérico de dos caracteres ISO 3166-1 del país de la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        if ((mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling ReceiverPostReceiver., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets business_identifier
     *
     * @return string
     */
    public function getBusinessIdentifier()
    {
        return $this->container['business_identifier'];
    }

    /**
     * Sets business_identifier
     *
     * @param string $business_identifier Identificador tributario del cobrador asociado a la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setBusinessIdentifier($business_identifier)
    {
        if (is_null($business_identifier)) {
            throw new \InvalidArgumentException('non-nullable business_identifier cannot be null');
        }
        if ((mb_strlen($business_identifier) > 255)) {
            throw new \InvalidArgumentException('invalid length for $business_identifier when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($business_identifier) < 8)) {
            throw new \InvalidArgumentException('invalid length for $business_identifier when calling ReceiverPostReceiver., must be bigger than or equal to 8.');
        }

        $this->container['business_identifier'] = $business_identifier;

        return $this;
    }

    /**
     * Gets business_category
     *
     * @return string
     */
    public function getBusinessCategory()
    {
        return $this->container['business_category'];
    }

    /**
     * Sets business_category
     *
     * @param string $business_category Categoría tributaria o rubro tributario del cobrador asociado a la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setBusinessCategory($business_category)
    {
        if (is_null($business_category)) {
            throw new \InvalidArgumentException('non-nullable business_category cannot be null');
        }
        if ((mb_strlen($business_category) > 255)) {
            throw new \InvalidArgumentException('invalid length for $business_category when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['business_category'] = $business_category;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name Nombre tributario del cobrador asociado a la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            throw new \InvalidArgumentException('non-nullable business_name cannot be null');
        }
        if ((mb_strlen($business_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $business_name when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_phone
     *
     * @return string
     */
    public function getBusinessPhone()
    {
        return $this->container['business_phone'];
    }

    /**
     * Sets business_phone
     *
     * @param string $business_phone Teléfono del cobrador asociado a la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setBusinessPhone($business_phone)
    {
        if (is_null($business_phone)) {
            throw new \InvalidArgumentException('non-nullable business_phone cannot be null');
        }
        if ((mb_strlen($business_phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $business_phone when calling ReceiverPostReceiver., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($business_phone) < 5)) {
            throw new \InvalidArgumentException('invalid length for $business_phone when calling ReceiverPostReceiver., must be bigger than or equal to 5.');
        }

        $this->container['business_phone'] = $business_phone;

        return $this;
    }

    /**
     * Gets business_address_line_1
     *
     * @return string
     */
    public function getBusinessAddressLine1()
    {
        return $this->container['business_address_line_1'];
    }

    /**
     * Sets business_address_line_1
     *
     * @param string $business_address_line_1 Dirección del cobrador de la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setBusinessAddressLine1($business_address_line_1)
    {
        if (is_null($business_address_line_1)) {
            throw new \InvalidArgumentException('non-nullable business_address_line_1 cannot be null');
        }
        if ((mb_strlen($business_address_line_1) > 300)) {
            throw new \InvalidArgumentException('invalid length for $business_address_line_1 when calling ReceiverPostReceiver., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($business_address_line_1) < 4)) {
            throw new \InvalidArgumentException('invalid length for $business_address_line_1 when calling ReceiverPostReceiver., must be bigger than or equal to 4.');
        }

        $this->container['business_address_line_1'] = $business_address_line_1;

        return $this;
    }

    /**
     * Gets business_address_line_2
     *
     * @return string
     */
    public function getBusinessAddressLine2()
    {
        return $this->container['business_address_line_2'];
    }

    /**
     * Sets business_address_line_2
     *
     * @param string $business_address_line_2 Segunda línea de la dirección del cobrador de la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setBusinessAddressLine2($business_address_line_2)
    {
        if (is_null($business_address_line_2)) {
            throw new \InvalidArgumentException('non-nullable business_address_line_2 cannot be null');
        }
        if ((mb_strlen($business_address_line_2) > 300)) {
            throw new \InvalidArgumentException('invalid length for $business_address_line_2 when calling ReceiverPostReceiver., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($business_address_line_2) < 4)) {
            throw new \InvalidArgumentException('invalid length for $business_address_line_2 when calling ReceiverPostReceiver., must be bigger than or equal to 4.');
        }

        $this->container['business_address_line_2'] = $business_address_line_2;

        return $this;
    }

    /**
     * Gets business_address_line_3
     *
     * @return string
     */
    public function getBusinessAddressLine3()
    {
        return $this->container['business_address_line_3'];
    }

    /**
     * Sets business_address_line_3
     *
     * @param string $business_address_line_3 Tercera línea de la dirección del cobrador de la cuenta de cobro a crear.
     *
     * @return self
     */
    public function setBusinessAddressLine3($business_address_line_3)
    {
        if (is_null($business_address_line_3)) {
            throw new \InvalidArgumentException('non-nullable business_address_line_3 cannot be null');
        }
        if ((mb_strlen($business_address_line_3) > 300)) {
            throw new \InvalidArgumentException('invalid length for $business_address_line_3 when calling ReceiverPostReceiver., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($business_address_line_3) < 4)) {
            throw new \InvalidArgumentException('invalid length for $business_address_line_3 when calling ReceiverPostReceiver., must be bigger than or equal to 4.');
        }

        $this->container['business_address_line_3'] = $business_address_line_3;

        return $this;
    }

    /**
     * Gets contact_full_name
     *
     * @return string
     */
    public function getContactFullName()
    {
        return $this->container['contact_full_name'];
    }

    /**
     * Sets contact_full_name
     *
     * @param string $contact_full_name Nombre del contacto del cobrador.
     *
     * @return self
     */
    public function setContactFullName($contact_full_name)
    {
        if (is_null($contact_full_name)) {
            throw new \InvalidArgumentException('non-nullable contact_full_name cannot be null');
        }
        if ((mb_strlen($contact_full_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_full_name when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['contact_full_name'] = $contact_full_name;

        return $this;
    }

    /**
     * Gets contact_job_title
     *
     * @return string
     */
    public function getContactJobTitle()
    {
        return $this->container['contact_job_title'];
    }

    /**
     * Sets contact_job_title
     *
     * @param string $contact_job_title Cargo del contacto del cobrador.
     *
     * @return self
     */
    public function setContactJobTitle($contact_job_title)
    {
        if (is_null($contact_job_title)) {
            throw new \InvalidArgumentException('non-nullable contact_job_title cannot be null');
        }
        if ((mb_strlen($contact_job_title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_job_title when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['contact_job_title'] = $contact_job_title;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email Correo electrónico del contacto del cobrador.
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            throw new \InvalidArgumentException('non-nullable contact_email cannot be null');
        }
        if ((mb_strlen($contact_email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string $contact_phone Teléfono del contacto del cobrador.
     *
     * @return self
     */
    public function setContactPhone($contact_phone)
    {
        if (is_null($contact_phone)) {
            throw new \InvalidArgumentException('non-nullable contact_phone cannot be null');
        }
        if ((mb_strlen($contact_phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone when calling ReceiverPostReceiver., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($contact_phone) < 5)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone when calling ReceiverPostReceiver., must be bigger than or equal to 5.');
        }

        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets bank_account_bank_id
     *
     * @return string|null
     */
    public function getBankAccountBankId()
    {
        return $this->container['bank_account_bank_id'];
    }

    /**
     * Sets bank_account_bank_id
     *
     * @param string|null $bank_account_bank_id Identificador del banco.
     *
     * @return self
     */
    public function setBankAccountBankId($bank_account_bank_id)
    {
        if (is_null($bank_account_bank_id)) {
            throw new \InvalidArgumentException('non-nullable bank_account_bank_id cannot be null');
        }
        if ((mb_strlen($bank_account_bank_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_bank_id when calling ReceiverPostReceiver., must be smaller than or equal to 5.');
        }

        $this->container['bank_account_bank_id'] = $bank_account_bank_id;

        return $this;
    }

    /**
     * Gets bank_account_type
     *
     * @return string|null
     */
    public function getBankAccountType()
    {
        return $this->container['bank_account_type'];
    }

    /**
     * Sets bank_account_type
     *
     * @param string|null $bank_account_type Tipo de cuenta. Es obligatorio si se utiliza el modelo alternativo de integrador de confianza.
     *
     * @return self
     */
    public function setBankAccountType($bank_account_type)
    {
        if (is_null($bank_account_type)) {
            throw new \InvalidArgumentException('non-nullable bank_account_type cannot be null');
        }
        if ((mb_strlen($bank_account_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_type when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['bank_account_type'] = $bank_account_type;

        return $this;
    }

    /**
     * Gets bank_account_identifier
     *
     * @return string|null
     */
    public function getBankAccountIdentifier()
    {
        return $this->container['bank_account_identifier'];
    }

    /**
     * Sets bank_account_identifier
     *
     * @param string|null $bank_account_identifier Identificador personal del dueño de la cuenta de banco.
     *
     * @return self
     */
    public function setBankAccountIdentifier($bank_account_identifier)
    {
        if (is_null($bank_account_identifier)) {
            throw new \InvalidArgumentException('non-nullable bank_account_identifier cannot be null');
        }
        if ((mb_strlen($bank_account_identifier) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_identifier when calling ReceiverPostReceiver., must be smaller than or equal to 50.');
        }

        $this->container['bank_account_identifier'] = $bank_account_identifier;

        return $this;
    }

    /**
     * Gets bank_account_name
     *
     * @return string|null
     */
    public function getBankAccountName()
    {
        return $this->container['bank_account_name'];
    }

    /**
     * Sets bank_account_name
     *
     * @param string|null $bank_account_name Nombre de la cuenta de banco.
     *
     * @return self
     */
    public function setBankAccountName($bank_account_name)
    {
        if (is_null($bank_account_name)) {
            throw new \InvalidArgumentException('non-nullable bank_account_name cannot be null');
        }
        if ((mb_strlen($bank_account_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_name when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['bank_account_name'] = $bank_account_name;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string|null $bank_account_number Número de la cuenta en el banco.
     *
     * @return self
     */
    public function setBankAccountNumber($bank_account_number)
    {
        if (is_null($bank_account_number)) {
            throw new \InvalidArgumentException('non-nullable bank_account_number cannot be null');
        }
        if ((mb_strlen($bank_account_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling ReceiverPostReceiver., must be smaller than or equal to 255.');
        }

        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets notify_url
     *
     * @return string|null
     */
    public function getNotifyUrl()
    {
        return $this->container['notify_url'];
    }

    /**
     * Sets notify_url
     *
     * @param string|null $notify_url URL por omisión para el webservice donde se notificará el pago.
     *
     * @return self
     */
    public function setNotifyUrl($notify_url)
    {
        if (is_null($notify_url)) {
            throw new \InvalidArgumentException('non-nullable notify_url cannot be null');
        }
        if ((mb_strlen($notify_url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $notify_url when calling ReceiverPostReceiver., must be smaller than or equal to 1024.');
        }

        $this->container['notify_url'] = $notify_url;

        return $this;
    }

    /**
     * Gets rendition_url
     *
     * @return string|null
     */
    public function getRenditionUrl()
    {
        return $this->container['rendition_url'];
    }

    /**
     * Sets rendition_url
     *
     * @param string|null $rendition_url URL para el webservice donde se notificará la rendición.
     *
     * @return self
     */
    public function setRenditionUrl($rendition_url)
    {
        if (is_null($rendition_url)) {
            throw new \InvalidArgumentException('non-nullable rendition_url cannot be null');
        }
        if ((mb_strlen($rendition_url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $rendition_url when calling ReceiverPostReceiver., must be smaller than or equal to 1024.');
        }

        $this->container['rendition_url'] = $rendition_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


