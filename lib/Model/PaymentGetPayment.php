<?php
/**
 * PaymentGetPayment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Pagos Instantáneos
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentGetPayment Class Doc Comment
 *
 * @category Class
 * @description Información completa del pago. Datos con los que fue creado y el estado actual del pago.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentGetPayment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'payment-get-payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_id' => 'string',
        'payment_url' => 'string',
        'simplified_transfer_url' => 'string',
        'transfer_url' => 'string',
        'app_url' => 'string',
        'ready_for_terminal' => 'bool',
        'notification_token' => 'string',
        'receiver_id' => 'int',
        'conciliation_date' => '\DateTime',
        'subject' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'status' => 'string',
        'status_detail' => 'string',
        'body' => 'string',
        'picture_url' => 'string',
        'receipt_url' => 'string',
        'return_url' => 'string',
        'cancel_url' => 'string',
        'notify_url' => 'string',
        'notify_api_version' => 'string',
        'expires_date' => '\DateTime',
        'attachment_urls' => 'string[]',
        'bank' => 'string',
        'bank_id' => 'string',
        'payer_name' => 'string',
        'payer_email' => 'string',
        'personal_identifier' => 'string',
        'bank_account_number' => 'string',
        'out_of_date_conciliation' => 'bool',
        'transaction_id' => 'string',
        'custom' => 'string',
        'responsible_user_email' => 'string',
        'send_reminders' => 'bool',
        'send_email' => 'bool',
        'payment_method' => 'string',
        'funds_source' => 'string',
        'discount' => 'float',
        'third_party_authorization_details' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payment_id' => null,
        'payment_url' => null,
        'simplified_transfer_url' => null,
        'transfer_url' => null,
        'app_url' => null,
        'ready_for_terminal' => null,
        'notification_token' => null,
        'receiver_id' => 'int64',
        'conciliation_date' => 'date-time',
        'subject' => null,
        'amount' => 'double',
        'currency' => null,
        'status' => null,
        'status_detail' => null,
        'body' => null,
        'picture_url' => null,
        'receipt_url' => null,
        'return_url' => null,
        'cancel_url' => null,
        'notify_url' => null,
        'notify_api_version' => null,
        'expires_date' => 'date-time',
        'attachment_urls' => null,
        'bank' => null,
        'bank_id' => null,
        'payer_name' => null,
        'payer_email' => 'email',
        'personal_identifier' => null,
        'bank_account_number' => null,
        'out_of_date_conciliation' => null,
        'transaction_id' => null,
        'custom' => null,
        'responsible_user_email' => null,
        'send_reminders' => null,
        'send_email' => null,
        'payment_method' => null,
        'funds_source' => null,
        'discount' => 'double',
        'third_party_authorization_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payment_id' => false,
        'payment_url' => false,
        'simplified_transfer_url' => false,
        'transfer_url' => false,
        'app_url' => false,
        'ready_for_terminal' => false,
        'notification_token' => false,
        'receiver_id' => false,
        'conciliation_date' => false,
        'subject' => false,
        'amount' => false,
        'currency' => false,
        'status' => false,
        'status_detail' => false,
        'body' => false,
        'picture_url' => false,
        'receipt_url' => false,
        'return_url' => false,
        'cancel_url' => false,
        'notify_url' => false,
        'notify_api_version' => false,
        'expires_date' => false,
        'attachment_urls' => false,
        'bank' => false,
        'bank_id' => false,
        'payer_name' => false,
        'payer_email' => false,
        'personal_identifier' => false,
        'bank_account_number' => false,
        'out_of_date_conciliation' => false,
        'transaction_id' => false,
        'custom' => false,
        'responsible_user_email' => false,
        'send_reminders' => false,
        'send_email' => false,
        'payment_method' => false,
        'funds_source' => false,
        'discount' => false,
        'third_party_authorization_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_id' => 'payment_id',
        'payment_url' => 'payment_url',
        'simplified_transfer_url' => 'simplified_transfer_url',
        'transfer_url' => 'transfer_url',
        'app_url' => 'app_url',
        'ready_for_terminal' => 'ready_for_terminal',
        'notification_token' => 'notification_token',
        'receiver_id' => 'receiver_id',
        'conciliation_date' => 'conciliation_date',
        'subject' => 'subject',
        'amount' => 'amount',
        'currency' => 'currency',
        'status' => 'status',
        'status_detail' => 'status_detail',
        'body' => 'body',
        'picture_url' => 'picture_url',
        'receipt_url' => 'receipt_url',
        'return_url' => 'return_url',
        'cancel_url' => 'cancel_url',
        'notify_url' => 'notify_url',
        'notify_api_version' => 'notify_api_version',
        'expires_date' => 'expires_date',
        'attachment_urls' => 'attachment_urls',
        'bank' => 'bank',
        'bank_id' => 'bank_id',
        'payer_name' => 'payer_name',
        'payer_email' => 'payer_email',
        'personal_identifier' => 'personal_identifier',
        'bank_account_number' => 'bank_account_number',
        'out_of_date_conciliation' => 'out_of_date_conciliation',
        'transaction_id' => 'transaction_id',
        'custom' => 'custom',
        'responsible_user_email' => 'responsible_user_email',
        'send_reminders' => 'send_reminders',
        'send_email' => 'send_email',
        'payment_method' => 'payment_method',
        'funds_source' => 'funds_source',
        'discount' => 'discount',
        'third_party_authorization_details' => 'third_party_authorization_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_id' => 'setPaymentId',
        'payment_url' => 'setPaymentUrl',
        'simplified_transfer_url' => 'setSimplifiedTransferUrl',
        'transfer_url' => 'setTransferUrl',
        'app_url' => 'setAppUrl',
        'ready_for_terminal' => 'setReadyForTerminal',
        'notification_token' => 'setNotificationToken',
        'receiver_id' => 'setReceiverId',
        'conciliation_date' => 'setConciliationDate',
        'subject' => 'setSubject',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'status_detail' => 'setStatusDetail',
        'body' => 'setBody',
        'picture_url' => 'setPictureUrl',
        'receipt_url' => 'setReceiptUrl',
        'return_url' => 'setReturnUrl',
        'cancel_url' => 'setCancelUrl',
        'notify_url' => 'setNotifyUrl',
        'notify_api_version' => 'setNotifyApiVersion',
        'expires_date' => 'setExpiresDate',
        'attachment_urls' => 'setAttachmentUrls',
        'bank' => 'setBank',
        'bank_id' => 'setBankId',
        'payer_name' => 'setPayerName',
        'payer_email' => 'setPayerEmail',
        'personal_identifier' => 'setPersonalIdentifier',
        'bank_account_number' => 'setBankAccountNumber',
        'out_of_date_conciliation' => 'setOutOfDateConciliation',
        'transaction_id' => 'setTransactionId',
        'custom' => 'setCustom',
        'responsible_user_email' => 'setResponsibleUserEmail',
        'send_reminders' => 'setSendReminders',
        'send_email' => 'setSendEmail',
        'payment_method' => 'setPaymentMethod',
        'funds_source' => 'setFundsSource',
        'discount' => 'setDiscount',
        'third_party_authorization_details' => 'setThirdPartyAuthorizationDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_id' => 'getPaymentId',
        'payment_url' => 'getPaymentUrl',
        'simplified_transfer_url' => 'getSimplifiedTransferUrl',
        'transfer_url' => 'getTransferUrl',
        'app_url' => 'getAppUrl',
        'ready_for_terminal' => 'getReadyForTerminal',
        'notification_token' => 'getNotificationToken',
        'receiver_id' => 'getReceiverId',
        'conciliation_date' => 'getConciliationDate',
        'subject' => 'getSubject',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'status_detail' => 'getStatusDetail',
        'body' => 'getBody',
        'picture_url' => 'getPictureUrl',
        'receipt_url' => 'getReceiptUrl',
        'return_url' => 'getReturnUrl',
        'cancel_url' => 'getCancelUrl',
        'notify_url' => 'getNotifyUrl',
        'notify_api_version' => 'getNotifyApiVersion',
        'expires_date' => 'getExpiresDate',
        'attachment_urls' => 'getAttachmentUrls',
        'bank' => 'getBank',
        'bank_id' => 'getBankId',
        'payer_name' => 'getPayerName',
        'payer_email' => 'getPayerEmail',
        'personal_identifier' => 'getPersonalIdentifier',
        'bank_account_number' => 'getBankAccountNumber',
        'out_of_date_conciliation' => 'getOutOfDateConciliation',
        'transaction_id' => 'getTransactionId',
        'custom' => 'getCustom',
        'responsible_user_email' => 'getResponsibleUserEmail',
        'send_reminders' => 'getSendReminders',
        'send_email' => 'getSendEmail',
        'payment_method' => 'getPaymentMethod',
        'funds_source' => 'getFundsSource',
        'discount' => 'getDiscount',
        'third_party_authorization_details' => 'getThirdPartyAuthorizationDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PENDING = 'pending';
    public const STATUS_VERIFYING = 'verifying';
    public const STATUS_DONE = 'done';
    public const STATUS_DETAIL_PENDING = 'pending';
    public const STATUS_DETAIL_NORMAL = 'normal';
    public const STATUS_DETAIL_MARKED_PAID_BY_RECEIVER = 'marked-paid-by-receiver';
    public const STATUS_DETAIL_REJECTED_BY_PAYER = 'rejected-by-payer';
    public const STATUS_DETAIL_MARKED_AS_ABUSE = 'marked-as-abuse';
    public const STATUS_DETAIL_REVERSED = 'reversed';
    public const PAYMENT_METHOD_REGULAR_TRANSFER = 'regular_transfer';
    public const PAYMENT_METHOD_SIMPLIFIED_TRANSFER = 'simplified_transfer';
    public const PAYMENT_METHOD_NOT_AVAILABLE = 'not_available';
    public const FUNDS_SOURCE_DEBIT = 'debit';
    public const FUNDS_SOURCE_PREPAID = 'prepaid';
    public const FUNDS_SOURCE_CREDIT = 'credit';
    public const FUNDS_SOURCE_NOT_AVAILABLE = 'not-available';
    public const FUNDS_SOURCE_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_VERIFYING,
            self::STATUS_DONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusDetailAllowableValues()
    {
        return [
            self::STATUS_DETAIL_PENDING,
            self::STATUS_DETAIL_NORMAL,
            self::STATUS_DETAIL_MARKED_PAID_BY_RECEIVER,
            self::STATUS_DETAIL_REJECTED_BY_PAYER,
            self::STATUS_DETAIL_MARKED_AS_ABUSE,
            self::STATUS_DETAIL_REVERSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_REGULAR_TRANSFER,
            self::PAYMENT_METHOD_SIMPLIFIED_TRANSFER,
            self::PAYMENT_METHOD_NOT_AVAILABLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFundsSourceAllowableValues()
    {
        return [
            self::FUNDS_SOURCE_DEBIT,
            self::FUNDS_SOURCE_PREPAID,
            self::FUNDS_SOURCE_CREDIT,
            self::FUNDS_SOURCE_NOT_AVAILABLE,
            self::FUNDS_SOURCE_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payment_id', $data ?? [], null);
        $this->setIfExists('payment_url', $data ?? [], null);
        $this->setIfExists('simplified_transfer_url', $data ?? [], null);
        $this->setIfExists('transfer_url', $data ?? [], null);
        $this->setIfExists('app_url', $data ?? [], null);
        $this->setIfExists('ready_for_terminal', $data ?? [], null);
        $this->setIfExists('notification_token', $data ?? [], null);
        $this->setIfExists('receiver_id', $data ?? [], null);
        $this->setIfExists('conciliation_date', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_detail', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('picture_url', $data ?? [], null);
        $this->setIfExists('receipt_url', $data ?? [], null);
        $this->setIfExists('return_url', $data ?? [], null);
        $this->setIfExists('cancel_url', $data ?? [], null);
        $this->setIfExists('notify_url', $data ?? [], null);
        $this->setIfExists('notify_api_version', $data ?? [], null);
        $this->setIfExists('expires_date', $data ?? [], null);
        $this->setIfExists('attachment_urls', $data ?? [], null);
        $this->setIfExists('bank', $data ?? [], null);
        $this->setIfExists('bank_id', $data ?? [], null);
        $this->setIfExists('payer_name', $data ?? [], null);
        $this->setIfExists('payer_email', $data ?? [], null);
        $this->setIfExists('personal_identifier', $data ?? [], null);
        $this->setIfExists('bank_account_number', $data ?? [], null);
        $this->setIfExists('out_of_date_conciliation', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
        $this->setIfExists('responsible_user_email', $data ?? [], null);
        $this->setIfExists('send_reminders', $data ?? [], null);
        $this->setIfExists('send_email', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('funds_source', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('third_party_authorization_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_id'] === null) {
            $invalidProperties[] = "'payment_id' can't be null";
        }
        if ($this->container['payment_url'] === null) {
            $invalidProperties[] = "'payment_url' can't be null";
        }
        if ($this->container['simplified_transfer_url'] === null) {
            $invalidProperties[] = "'simplified_transfer_url' can't be null";
        }
        if ($this->container['transfer_url'] === null) {
            $invalidProperties[] = "'transfer_url' can't be null";
        }
        if ($this->container['app_url'] === null) {
            $invalidProperties[] = "'app_url' can't be null";
        }
        if ($this->container['ready_for_terminal'] === null) {
            $invalidProperties[] = "'ready_for_terminal' can't be null";
        }
        if ($this->container['notification_token'] === null) {
            $invalidProperties[] = "'notification_token' can't be null";
        }
        if ($this->container['receiver_id'] === null) {
            $invalidProperties[] = "'receiver_id' can't be null";
        }
        if ($this->container['conciliation_date'] === null) {
            $invalidProperties[] = "'conciliation_date' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status_detail'] === null) {
            $invalidProperties[] = "'status_detail' can't be null";
        }
        $allowedValues = $this->getStatusDetailAllowableValues();
        if (!is_null($this->container['status_detail']) && !in_array($this->container['status_detail'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status_detail', must be one of '%s'",
                $this->container['status_detail'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['picture_url'] === null) {
            $invalidProperties[] = "'picture_url' can't be null";
        }
        if ($this->container['receipt_url'] === null) {
            $invalidProperties[] = "'receipt_url' can't be null";
        }
        if ($this->container['return_url'] === null) {
            $invalidProperties[] = "'return_url' can't be null";
        }
        if ($this->container['cancel_url'] === null) {
            $invalidProperties[] = "'cancel_url' can't be null";
        }
        if ($this->container['notify_url'] === null) {
            $invalidProperties[] = "'notify_url' can't be null";
        }
        if ($this->container['notify_api_version'] === null) {
            $invalidProperties[] = "'notify_api_version' can't be null";
        }
        if ($this->container['expires_date'] === null) {
            $invalidProperties[] = "'expires_date' can't be null";
        }
        if ($this->container['attachment_urls'] === null) {
            $invalidProperties[] = "'attachment_urls' can't be null";
        }
        if ((count($this->container['attachment_urls']) < 0)) {
            $invalidProperties[] = "invalid value for 'attachment_urls', number of items must be greater than or equal to 0.";
        }

        if ($this->container['bank'] === null) {
            $invalidProperties[] = "'bank' can't be null";
        }
        if ($this->container['bank_id'] === null) {
            $invalidProperties[] = "'bank_id' can't be null";
        }
        if ($this->container['payer_name'] === null) {
            $invalidProperties[] = "'payer_name' can't be null";
        }
        if ($this->container['payer_email'] === null) {
            $invalidProperties[] = "'payer_email' can't be null";
        }
        if ($this->container['personal_identifier'] === null) {
            $invalidProperties[] = "'personal_identifier' can't be null";
        }
        if ($this->container['bank_account_number'] === null) {
            $invalidProperties[] = "'bank_account_number' can't be null";
        }
        if ($this->container['out_of_date_conciliation'] === null) {
            $invalidProperties[] = "'out_of_date_conciliation' can't be null";
        }
        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['custom'] === null) {
            $invalidProperties[] = "'custom' can't be null";
        }
        if ($this->container['responsible_user_email'] === null) {
            $invalidProperties[] = "'responsible_user_email' can't be null";
        }
        if ($this->container['send_reminders'] === null) {
            $invalidProperties[] = "'send_reminders' can't be null";
        }
        if ($this->container['send_email'] === null) {
            $invalidProperties[] = "'send_email' can't be null";
        }
        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_method', must be one of '%s'",
                $this->container['payment_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['funds_source'] === null) {
            $invalidProperties[] = "'funds_source' can't be null";
        }
        $allowedValues = $this->getFundsSourceAllowableValues();
        if (!is_null($this->container['funds_source']) && !in_array($this->container['funds_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'funds_source', must be one of '%s'",
                $this->container['funds_source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string $payment_id Identificador único del pago, es una cadena alfanumérica de 12 caracteres. Como este identificador es único, se puede usar, por ejemplo, para evitar procesar una notificación repetida. (Khipu espera un código 200 al notificar un pago, si esto no ocurre se reintenta hasta por dos días).
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {
        if (is_null($payment_id)) {
            throw new \InvalidArgumentException('non-nullable payment_id cannot be null');
        }
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets payment_url
     *
     * @return string
     */
    public function getPaymentUrl()
    {
        return $this->container['payment_url'];
    }

    /**
     * Sets payment_url
     *
     * @param string $payment_url URL principal del pago, si el usuario no ha elegido previamente un método de pago se le muestran las opciones.
     *
     * @return self
     */
    public function setPaymentUrl($payment_url)
    {
        if (is_null($payment_url)) {
            throw new \InvalidArgumentException('non-nullable payment_url cannot be null');
        }
        $this->container['payment_url'] = $payment_url;

        return $this;
    }

    /**
     * Gets simplified_transfer_url
     *
     * @return string
     */
    public function getSimplifiedTransferUrl()
    {
        return $this->container['simplified_transfer_url'];
    }

    /**
     * Sets simplified_transfer_url
     *
     * @param string $simplified_transfer_url URL de pago simplificado.
     *
     * @return self
     */
    public function setSimplifiedTransferUrl($simplified_transfer_url)
    {
        if (is_null($simplified_transfer_url)) {
            throw new \InvalidArgumentException('non-nullable simplified_transfer_url cannot be null');
        }
        $this->container['simplified_transfer_url'] = $simplified_transfer_url;

        return $this;
    }

    /**
     * Gets transfer_url
     *
     * @return string
     */
    public function getTransferUrl()
    {
        return $this->container['transfer_url'];
    }

    /**
     * Sets transfer_url
     *
     * @param string $transfer_url URL de pago normal.
     *
     * @return self
     */
    public function setTransferUrl($transfer_url)
    {
        if (is_null($transfer_url)) {
            throw new \InvalidArgumentException('non-nullable transfer_url cannot be null');
        }
        $this->container['transfer_url'] = $transfer_url;

        return $this;
    }

    /**
     * Gets app_url
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['app_url'];
    }

    /**
     * Sets app_url
     *
     * @param string $app_url URL para invocar el pago desde un dispositivo móvil usando la APP de Khipu.
     *
     * @return self
     */
    public function setAppUrl($app_url)
    {
        if (is_null($app_url)) {
            throw new \InvalidArgumentException('non-nullable app_url cannot be null');
        }
        $this->container['app_url'] = $app_url;

        return $this;
    }

    /**
     * Gets ready_for_terminal
     *
     * @return bool
     */
    public function getReadyForTerminal()
    {
        return $this->container['ready_for_terminal'];
    }

    /**
     * Sets ready_for_terminal
     *
     * @param bool $ready_for_terminal Es `true` si el pago ya cuenta con todos los datos necesarios para abrir directamente la aplicación de pagos Khipu.
     *
     * @return self
     */
    public function setReadyForTerminal($ready_for_terminal)
    {
        if (is_null($ready_for_terminal)) {
            throw new \InvalidArgumentException('non-nullable ready_for_terminal cannot be null');
        }
        $this->container['ready_for_terminal'] = $ready_for_terminal;

        return $this;
    }

    /**
     * Gets notification_token
     *
     * @return string
     */
    public function getNotificationToken()
    {
        return $this->container['notification_token'];
    }

    /**
     * Sets notification_token
     *
     * @param string $notification_token Cadena de caracteres alfanuméricos que identifican unicamente al pago, es el identificador que el servidor de Khipu enviará al servidor del comercio cuando notifique que un pago está conciliado.
     *
     * @return self
     */
    public function setNotificationToken($notification_token)
    {
        if (is_null($notification_token)) {
            throw new \InvalidArgumentException('non-nullable notification_token cannot be null');
        }
        $this->container['notification_token'] = $notification_token;

        return $this;
    }

    /**
     * Gets receiver_id
     *
     * @return int
     */
    public function getReceiverId()
    {
        return $this->container['receiver_id'];
    }

    /**
     * Sets receiver_id
     *
     * @param int $receiver_id Identificador único de una cuenta de cobro.
     *
     * @return self
     */
    public function setReceiverId($receiver_id)
    {
        if (is_null($receiver_id)) {
            throw new \InvalidArgumentException('non-nullable receiver_id cannot be null');
        }
        $this->container['receiver_id'] = $receiver_id;

        return $this;
    }

    /**
     * Gets conciliation_date
     *
     * @return \DateTime
     */
    public function getConciliationDate()
    {
        return $this->container['conciliation_date'];
    }

    /**
     * Sets conciliation_date
     *
     * @param \DateTime $conciliation_date Fecha y hora de conciliación del pago. Formato ISO-8601.
     *
     * @return self
     */
    public function setConciliationDate($conciliation_date)
    {
        if (is_null($conciliation_date)) {
            throw new \InvalidArgumentException('non-nullable conciliation_date cannot be null');
        }
        $this->container['conciliation_date'] = $conciliation_date;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Motivo del pago.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount El monto del cobro.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency El código de moneda en formato ISO-4217.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Estado del pago, puede ser `pending` (el pagador aún no comienza a pagar), `verifying` (se está verificando el pago) o `done`, cuando el pago ya está confirmado.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_detail
     *
     * @return string
     */
    public function getStatusDetail()
    {
        return $this->container['status_detail'];
    }

    /**
     * Sets status_detail
     *
     * @param string $status_detail Detalle del estado del pago: `pending` (el pagador aún no comienza a pagar), `normal` (el pago fue verificado y fue cancelado por algún medio de pago estándar), `marked-paid-by-receiver` (el cobrador marcó el cobro como pagado por otro medio), `rejected-by-payer` (el pagador declaró que no pagará), `marked-as-abuse` (el pagador declaró que no pagará y que el cobro fue no solicitado), y `reversed` (el pago fue anulado por el comercio, el dinero fue devuelto al pagador).
     *
     * @return self
     */
    public function setStatusDetail($status_detail)
    {
        if (is_null($status_detail)) {
            throw new \InvalidArgumentException('non-nullable status_detail cannot be null');
        }
        $allowedValues = $this->getStatusDetailAllowableValues();
        if (!in_array($status_detail, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status_detail', must be one of '%s'",
                    $status_detail,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status_detail'] = $status_detail;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body Detalle del cobro.
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets picture_url
     *
     * @return string
     */
    public function getPictureUrl()
    {
        return $this->container['picture_url'];
    }

    /**
     * Sets picture_url
     *
     * @param string $picture_url URL con imagen del cobro.
     *
     * @return self
     */
    public function setPictureUrl($picture_url)
    {
        if (is_null($picture_url)) {
            throw new \InvalidArgumentException('non-nullable picture_url cannot be null');
        }
        $this->container['picture_url'] = $picture_url;

        return $this;
    }

    /**
     * Gets receipt_url
     *
     * @return string
     */
    public function getReceiptUrl()
    {
        return $this->container['receipt_url'];
    }

    /**
     * Sets receipt_url
     *
     * @param string $receipt_url URL del comprobante de pago.
     *
     * @return self
     */
    public function setReceiptUrl($receipt_url)
    {
        if (is_null($receipt_url)) {
            throw new \InvalidArgumentException('non-nullable receipt_url cannot be null');
        }
        $this->container['receipt_url'] = $receipt_url;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string $return_url URL donde se redirige al pagador luego que termina el pago.
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        if (is_null($return_url)) {
            throw new \InvalidArgumentException('non-nullable return_url cannot be null');
        }
        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string $cancel_url URL donde se redirige al pagador luego de que desiste hacer el pago.
     *
     * @return self
     */
    public function setCancelUrl($cancel_url)
    {
        if (is_null($cancel_url)) {
            throw new \InvalidArgumentException('non-nullable cancel_url cannot be null');
        }
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets notify_url
     *
     * @return string
     */
    public function getNotifyUrl()
    {
        return $this->container['notify_url'];
    }

    /**
     * Sets notify_url
     *
     * @param string $notify_url URL del webservice donde se notificará el pago.
     *
     * @return self
     */
    public function setNotifyUrl($notify_url)
    {
        if (is_null($notify_url)) {
            throw new \InvalidArgumentException('non-nullable notify_url cannot be null');
        }
        $this->container['notify_url'] = $notify_url;

        return $this;
    }

    /**
     * Gets notify_api_version
     *
     * @return string
     */
    public function getNotifyApiVersion()
    {
        return $this->container['notify_api_version'];
    }

    /**
     * Sets notify_api_version
     *
     * @param string $notify_api_version Versión de la API de notificación.
     *
     * @return self
     */
    public function setNotifyApiVersion($notify_api_version)
    {
        if (is_null($notify_api_version)) {
            throw new \InvalidArgumentException('non-nullable notify_api_version cannot be null');
        }
        $this->container['notify_api_version'] = $notify_api_version;

        return $this;
    }

    /**
     * Gets expires_date
     *
     * @return \DateTime
     */
    public function getExpiresDate()
    {
        return $this->container['expires_date'];
    }

    /**
     * Sets expires_date
     *
     * @param \DateTime $expires_date Fecha máxima para ejecutar el pago (en formato ISO-8601). El cliente podrá realizar varios intentos de pago hasta dicha fecha. Cada intento tiene un plazo individual de 3 horas para su ejecución.
     *
     * @return self
     */
    public function setExpiresDate($expires_date)
    {
        if (is_null($expires_date)) {
            throw new \InvalidArgumentException('non-nullable expires_date cannot be null');
        }
        $this->container['expires_date'] = $expires_date;

        return $this;
    }

    /**
     * Gets attachment_urls
     *
     * @return string[]
     */
    public function getAttachmentUrls()
    {
        return $this->container['attachment_urls'];
    }

    /**
     * Sets attachment_urls
     *
     * @param string[] $attachment_urls Arreglo de URLs de archivos adjuntos al pago.
     *
     * @return self
     */
    public function setAttachmentUrls($attachment_urls)
    {
        if (is_null($attachment_urls)) {
            throw new \InvalidArgumentException('non-nullable attachment_urls cannot be null');
        }


        if ((count($attachment_urls) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attachment_urls when calling PaymentGetPayment., number of items must be greater than or equal to 0.');
        }
        $this->container['attachment_urls'] = $attachment_urls;

        return $this;
    }

    /**
     * Gets bank
     *
     * @return string
     */
    public function getBank()
    {
        return $this->container['bank'];
    }

    /**
     * Sets bank
     *
     * @param string $bank Nombre del banco seleccionado por el pagador.
     *
     * @return self
     */
    public function setBank($bank)
    {
        if (is_null($bank)) {
            throw new \InvalidArgumentException('non-nullable bank cannot be null');
        }
        $this->container['bank'] = $bank;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param string $bank_id Identificador del banco seleccionado por el pagador.
     *
     * @return self
     */
    public function setBankId($bank_id)
    {
        if (is_null($bank_id)) {
            throw new \InvalidArgumentException('non-nullable bank_id cannot be null');
        }
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets payer_name
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string $payer_name Nombre del pagador.
     *
     * @return self
     */
    public function setPayerName($payer_name)
    {
        if (is_null($payer_name)) {
            throw new \InvalidArgumentException('non-nullable payer_name cannot be null');
        }
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets payer_email
     *
     * @return string
     */
    public function getPayerEmail()
    {
        return $this->container['payer_email'];
    }

    /**
     * Sets payer_email
     *
     * @param string $payer_email Correo electrónico del pagador.
     *
     * @return self
     */
    public function setPayerEmail($payer_email)
    {
        if (is_null($payer_email)) {
            throw new \InvalidArgumentException('non-nullable payer_email cannot be null');
        }
        $this->container['payer_email'] = $payer_email;

        return $this;
    }

    /**
     * Gets personal_identifier
     *
     * @return string
     */
    public function getPersonalIdentifier()
    {
        return $this->container['personal_identifier'];
    }

    /**
     * Sets personal_identifier
     *
     * @param string $personal_identifier Identificador personal del pagador.
     *
     * @return self
     */
    public function setPersonalIdentifier($personal_identifier)
    {
        if (is_null($personal_identifier)) {
            throw new \InvalidArgumentException('non-nullable personal_identifier cannot be null');
        }
        $this->container['personal_identifier'] = $personal_identifier;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number Número de cuenta bancaria del pagador.
     *
     * @return self
     */
    public function setBankAccountNumber($bank_account_number)
    {
        if (is_null($bank_account_number)) {
            throw new \InvalidArgumentException('non-nullable bank_account_number cannot be null');
        }
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets out_of_date_conciliation
     *
     * @return bool
     */
    public function getOutOfDateConciliation()
    {
        return $this->container['out_of_date_conciliation'];
    }

    /**
     * Sets out_of_date_conciliation
     *
     * @param bool $out_of_date_conciliation Es `true` si la conciliación del pago fue hecha luego de la fecha de expiración.
     *
     * @return self
     */
    public function setOutOfDateConciliation($out_of_date_conciliation)
    {
        if (is_null($out_of_date_conciliation)) {
            throw new \InvalidArgumentException('non-nullable out_of_date_conciliation cannot be null');
        }
        $this->container['out_of_date_conciliation'] = $out_of_date_conciliation;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Identificador del pago asignado por el cobrador.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return string
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param string $custom Campo genérico que asigna el cobrador al momento de hacer el pago.
     *
     * @return self
     */
    public function setCustom($custom)
    {
        if (is_null($custom)) {
            throw new \InvalidArgumentException('non-nullable custom cannot be null');
        }
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets responsible_user_email
     *
     * @return string
     */
    public function getResponsibleUserEmail()
    {
        return $this->container['responsible_user_email'];
    }

    /**
     * Sets responsible_user_email
     *
     * @param string $responsible_user_email Correo electrónico de la persona responsable del pago.
     *
     * @return self
     */
    public function setResponsibleUserEmail($responsible_user_email)
    {
        if (is_null($responsible_user_email)) {
            throw new \InvalidArgumentException('non-nullable responsible_user_email cannot be null');
        }
        $this->container['responsible_user_email'] = $responsible_user_email;

        return $this;
    }

    /**
     * Gets send_reminders
     *
     * @return bool
     */
    public function getSendReminders()
    {
        return $this->container['send_reminders'];
    }

    /**
     * Sets send_reminders
     *
     * @param bool $send_reminders Es `true` cuando este es un cobro por correo electrónico y Khipu enviará recordatorios.
     *
     * @return self
     */
    public function setSendReminders($send_reminders)
    {
        if (is_null($send_reminders)) {
            throw new \InvalidArgumentException('non-nullable send_reminders cannot be null');
        }
        $this->container['send_reminders'] = $send_reminders;

        return $this;
    }

    /**
     * Gets send_email
     *
     * @return bool
     */
    public function getSendEmail()
    {
        return $this->container['send_email'];
    }

    /**
     * Sets send_email
     *
     * @param bool $send_email Es `true` cuando Khipu enviará el cobro por correo electrónico.
     *
     * @return self
     */
    public function setSendEmail($send_email)
    {
        if (is_null($send_email)) {
            throw new \InvalidArgumentException('non-nullable send_email cannot be null');
        }
        $this->container['send_email'] = $send_email;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Método de pago usado por el pagador, puede ser `regular_transfer` (transferencia normal) o `simplified_transfer` (transferencia simplificada).
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_method', must be one of '%s'",
                    $payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets funds_source
     *
     * @return string
     */
    public function getFundsSource()
    {
        return $this->container['funds_source'];
    }

    /**
     * Sets funds_source
     *
     * @param string $funds_source Origen de fondos usado por el pagador, puede ser `debit` para pago con débito, `prepaid` para pago con prepago, `credit` para pago con crédito, o vacío en el caso de que se haya pagado mediante transferencia bancaria.
     *
     * @return self
     */
    public function setFundsSource($funds_source)
    {
        if (is_null($funds_source)) {
            throw new \InvalidArgumentException('non-nullable funds_source cannot be null');
        }
        $allowedValues = $this->getFundsSourceAllowableValues();
        if (!in_array($funds_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'funds_source', must be one of '%s'",
                    $funds_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['funds_source'] = $funds_source;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount Monto a descontar del valor pagado.
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets third_party_authorization_details
     *
     * @return string|null
     */
    public function getThirdPartyAuthorizationDetails()
    {
        return $this->container['third_party_authorization_details'];
    }

    /**
     * Sets third_party_authorization_details
     *
     * @param string|null $third_party_authorization_details Ignorar este campo.
     *
     * @return self
     */
    public function setThirdPartyAuthorizationDetails($third_party_authorization_details)
    {
        if (is_null($third_party_authorization_details)) {
            throw new \InvalidArgumentException('non-nullable third_party_authorization_details cannot be null');
        }
        $this->container['third_party_authorization_details'] = $third_party_authorization_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


